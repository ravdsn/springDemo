# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - uses: mr-smithers-excellent/docker-build-push@v5
      name: Build & push Docker image
      with:
        image: ravdsn/secret-message
        tags: v1.1
        registry: docker.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build, Push and Release a Docker container to Heroku. # Your custom step name
      uses: gonuit/heroku-docker-deploy@v1.1.0 # GitHub action name (leave it as it is).
      with:
        # Below you must provide variables for your Heroku app.

        # The email address associated with your Heroku account.
        email: ${{ secrets.HEROKU_EMAIL }}
        # If you don't want to use repository secrets (which is recommended) you can do:
        # email: my.email@example.com

        # Heroku API key associated with provided user's email.
        # Api Key is available under your Heroku account settings.
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}

        # Name of the heroku application to which the build is to be sent.
        heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}

        # Dokerfile name. Optional, by default will be set to "Dockerfile".
        dockerfile_name: Dockerfile

        # Additional options of docker build command. (Optional)
        docker_options: "--no-cache"

        # Dokerfile directory.
        # For example, if you have a Dockerfile in the root of your project, leave it as follows:
        dockerfile_directory: ./
